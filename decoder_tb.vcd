$date
	Sat Jul 19 18:03:18 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module decoder_tb $end
$var wire 1 ! sram_wr_en $end
$var wire 8 " sram_wr_data [7:0] $end
$var wire 1 # sram_rd_en $end
$var wire 8 $ sram_addr [7:0] $end
$var wire 1 % reg_wr_en $end
$var wire 8 & reg_wr_data [7:0] $end
$var wire 2 ' reg_wr_addr [1:0] $end
$var wire 1 ( pc_hlt $end
$var wire 8 ) op_2 [7:0] $end
$var wire 8 * op_1 [7:0] $end
$var wire 8 + lcd_data [7:0] $end
$var wire 1 , jmp_en $end
$var wire 9 - jmp_addr [8:0] $end
$var wire 2 . instr_size [1:0] $end
$var wire 8 / data_loc [7:0] $end
$var wire 3 0 alu_inst [2:0] $end
$var reg 1 1 clk $end
$var reg 8 2 instr_byte [7:0] $end
$var reg 1 3 lcd_done $end
$var reg 8 4 operand1 [7:0] $end
$var reg 8 5 operand2 [7:0] $end
$var reg 1 6 pc_strt $end
$var reg 8 7 reg_a [7:0] $end
$var reg 8 8 reg_b [7:0] $end
$var reg 8 9 reg_c [7:0] $end
$var reg 8 : reg_d [7:0] $end
$var reg 8 ; reg_flags [7:0] $end
$var reg 8 < res [7:0] $end
$var reg 8 = sram_data [7:0] $end
$var reg 1 > sys_rst $end
$scope module uut $end
$var wire 1 1 clk $end
$var wire 1 6 cmd_start $end
$var wire 8 ? instr_byte [7:0] $end
$var wire 1 3 lcd_done $end
$var wire 8 @ operand1 [7:0] $end
$var wire 8 A operand2 [7:0] $end
$var wire 8 B reg_a [7:0] $end
$var wire 8 C reg_b [7:0] $end
$var wire 8 D reg_c [7:0] $end
$var wire 8 E reg_d [7:0] $end
$var wire 8 F reg_flags [7:0] $end
$var wire 8 G res [7:0] $end
$var wire 8 H sram_rd_data [7:0] $end
$var wire 1 > sys_rst $end
$var parameter 3 I STATE_DECODE $end
$var parameter 3 J STATE_EXECUTE_END $end
$var parameter 3 K STATE_EXECUTE_START $end
$var parameter 3 L STATE_FETCH $end
$var parameter 3 M STATE_INIT $end
$var parameter 3 N STATE_RETRIEVE $end
$var reg 1 O alu_en $end
$var reg 3 P alu_inst [2:0] $end
$var reg 8 Q data_loc [7:0] $end
$var reg 2 R instr_size [1:0] $end
$var reg 9 S jmp_addr [8:0] $end
$var reg 1 , jmp_en $end
$var reg 8 T lcd_data [7:0] $end
$var reg 1 U loc_req $end
$var reg 8 V op_1 [7:0] $end
$var reg 8 W op_2 [7:0] $end
$var reg 1 ( pc_hlt $end
$var reg 2 X reg_wr_addr [1:0] $end
$var reg 8 Y reg_wr_data [7:0] $end
$var reg 1 % reg_wr_en $end
$var reg 8 Z sram_addr [7:0] $end
$var reg 1 # sram_rd_en $end
$var reg 8 [ sram_wr_data [7:0] $end
$var reg 1 ! sram_wr_en $end
$var reg 3 \ state [2:0] $end
$var reg 1 ] strt $end
$upscope $end
$scope task check $end
$var reg 1 ^ condition $end
$var reg 1024 _ name [1023:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 N
b0 M
b1 L
b100 K
b101 J
b11 I
$end
#0
$dumpvars
bx _
x^
x]
b0 \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
bx T
b0 S
b1 R
bx Q
bx P
xO
b0 H
b10101010 G
b0 F
b1000100 E
b110011 D
b100010 C
b10001 B
b0 A
b0 @
b0 ?
1>
b0 =
b10101010 <
b0 ;
b1000100 :
b110011 9
b100010 8
b10001 7
06
b0 5
b0 4
03
b0 2
01
bx 0
bx /
b1 .
b0 -
0,
bx +
bx *
bx )
0(
bx '
bx &
0%
bx $
0#
bx "
0!
$end
#5
0>
#13
16
b1 2
b1 ?
11
#26
01
#39
b1 \
1(
06
11
#52
01
#65
b11 \
11
#78
01
#91
b100 \
b100010 &
b100010 Y
b0 '
b0 X
11
#104
01
#117
b101 \
1%
11
#122
1^
b100110101001111010101100010000001000001001011000010000001000010 _
#130
01
#143
b0 \
0%
16
b1000010 4
b1000010 @
b11100 2
b11100 ?
11
#156
01
#169
b1 \
1(
06
11
#182
01
#195
b11 \
11
#208
01
#221
b100 \
b10 .
b10 R
b1000010 &
b1000010 Y
b11 '
b11 X
11
#234
01
#247
b101 \
1%
11
#252
b100110101001111010101100010000001000001001011000010000000110000011110000011010000110010 _
#260
01
#273
b0 \
0%
16
b1010001 4
b1010001 @
b101000 2
b101000 ?
11
#286
01
#299
b1 \
b1 .
b1 R
1(
06
11
#312
01
#325
b10 \
11
#338
01
#351
b11 \
1#
b1010001 $
b1010001 Z
11
#364
01
#377
b100 \
b10 .
b10 R
b0 &
b0 Y
b10 '
b10 X
1%
11
#390
01
#403
b101 \
11
#408
b1001101010011110101011000100000010000110010110000100000010110110011000001111000001101010011000101011101 _
#416
01
#429
b0 \
16
b1110101 4
b1110101 @
b110100 2
b110100 ?
11
#442
01
#455
b1 \
b1 .
b1 R
0%
0#
1(
06
11
#468
01
#481
b11 \
11
#494
01
#507
b100 \
b10 .
b10 R
b100010 "
b100010 [
1!
b1110101 $
b1110101 Z
11
#520
01
#533
b101 \
11
#538
b1001101010011110101011000100000010110110011000001111000001101110011010101011101001011000010000001000010 _
#546
01
#559
b0 \
b10000001 2
b10000001 ?
16
11
#572
01
#585
b1 \
b1 .
b1 R
0!
1(
06
11
#598
01
#611
b11 \
11
#624
01
#637
b100 \
b100010 )
b100010 W
b10001 *
b10001 V
b0 0
b0 P
11
#650
01
#663
b101 \
1O
11
#668
b100000101001110010001000010000001000001001011000010000001000010 _
#676
01
#689
b0 \
0O
b10011011 2
b10011011 ?
16
11
#702
01
#715
b1 \
1(
06
11
#728
01
#741
b11 \
11
#754
01
#767
b100 \
b1000100 )
b1000100 W
b110011 *
b110011 V
b1 0
b1 P
11
#780
01
#793
b101 \
1O
11
#798
b1001111010100100010000001000011001011000010000001000100 _
#806
01
#819
b0 \
0O
b10100001 2
b10100001 ?
16
11
#832
01
#845
b1 \
1(
06
11
#858
01
#871
b11 \
11
#884
01
#897
b100 \
b100010 )
b100010 W
b10001 *
b10001 V
b10 0
b10 P
11
#910
01
#923
b101 \
1O
b101100001001111010100100010000001000001001011000010000001000010 _
11
#936
01
#949
b0 \
0O
b10111000 2
b10111000 ?
16
11
#962
01
#975
b1 \
1(
06
11
#988
01
#1001
b11 \
11
#1014
01
#1027
b100 \
b0 )
b0 W
b110011 *
b110011 V
b11 0
b11 P
11
#1040
01
#1053
b101 \
1O
b100111001001111010101000010000001000011 _
11
#1066
01
#1079
b0 \
0O
b11001011 2
b11001011 ?
16
11
#1092
01
#1105
b1 \
1(
06
11
#1118
01
#1131
b11 \
11
#1144
01
#1157
b100 \
b1000100 )
b1000100 W
b100 0
b100 P
11
#1170
01
#1183
b101 \
1O
b100000101000100010001000010000001000011001011000010000001000100 _
11
#1196
01
#1209
b0 \
0O
b11010001 2
b11010001 ?
16
11
#1222
01
#1235
b1 \
1(
06
11
#1248
01
#1261
b11 \
11
#1274
01
#1287
b100 \
b100010 )
b100010 W
b10001 *
b10001 V
b101 0
b101 P
11
#1300
01
#1313
b101 \
1O
b101001101010101010000100010000001000001001011000010000001000010 _
11
#1326
01
#1339
b0 \
0O
b11101100 2
b11101100 ?
16
11
#1352
01
#1365
b1 \
1(
06
11
#1378
01
#1391
b11 \
11
#1404
01
#1417
b100 \
b0 )
b0 W
b1000100 *
b1000100 V
b110 0
b110 P
11
#1430
01
#1443
b101 \
1O
b100100101001110010000110010000001000011 _
11
#1456
01
#1469
b0 \
0O
b11111000 2
b11111000 ?
16
11
#1482
01
#1495
b1 \
1(
06
11
#1508
01
#1521
b11 \
11
#1534
01
#1547
b100 \
b110011 *
b110011 V
b111 0
b111 P
11
#1560
01
#1573
b101 \
1O
b100010001000101010000110010000001000011 _
11
#1586
01
#1599
b0 \
0O
b1100010 4
b1100010 @
b1010000 2
b1010000 ?
16
11
#1612
01
#1625
b1 \
1(
06
11
#1638
01
#1651
b11 \
11
#1664
01
#1677
b100 \
b1100010 -
b1100010 S
11
#1690
01
#1703
b101 \
1,
b1001010010011010101000000100000010110110011000001111000001101100011001001011101 _
11
#1716
01
#1729
b0 \
0,
b1010111 4
b1010111 @
b1010001 2
b1010001 ?
b10 ;
b10 F
16
11
#1742
01
#1755
b1 \
b0 -
b0 S
1(
06
11
#1768
01
#1781
b11 \
11
#1794
01
#1807
b100 \
b1010111 -
b1010111 S
11
#1820
01
#1833
b101 \
1,
b10010100101101000100000010110110011000001111000001101010011011101011101 _
11
#1846
01
#1859
b0 \
0,
b1110101 4
b1110101 @
b0 ;
b0 F
16
11
#1872
01
#1885
b1 \
b0 -
b0 S
1(
06
11
#1898
01
#1911
b11 \
11
#1924
01
#1937
b10 .
b10 R
b100 \
11
#1950
01
#1963
b101 \
b10010100101101000100000010110110011000001111000001101110011010101011101 _
11
#1976
01
#1989
b0 \
b1010111 4
b1010111 @
b1010010 2
b1010010 ?
b1001 ;
b1001 F
16
11
#2002
01
#2015
b1 \
b1 .
b1 R
1(
06
11
#2028
01
#2041
b11 \
11
#2054
01
#2067
b100 \
b1010111 -
b1010111 S
11
#2080
01
#2093
b101 \
b1001010010011100101101000100000010110110011000001111000001101010011011101011101 _
11
#2106
01
#2119
b0 \
b1110101 4
b1110101 @
b10 ;
b10 F
16
11
#2132
01
#2145
b1 \
b0 -
b0 S
1(
06
11
#2158
01
#2171
b11 \
11
#2184
01
#2197
b10 .
b10 R
b100 \
11
#2210
01
#2223
b101 \
1,
b1001010010011100101101000100000010110110011000001111000001101110011010101011101 _
11
#2236
01
#2249
b0 \
0,
b1100101 4
b1100101 @
b1010011 2
b1010011 ?
b1 ;
b1 F
16
11
#2262
01
#2275
b1 \
b1 .
b1 R
1(
06
11
#2288
01
#2301
b11 \
11
#2314
01
#2327
b100 \
b1100101 -
b1100101 S
11
#2340
01
#2353
b101 \
b1001010010011110101011000100000010110110011000001111000001101100011010101011101 _
11
#2366
01
#2379
b0 \
b10000001 4
b10000001 @
b0 ;
b0 F
16
11
#2392
01
#2405
b1 \
b0 -
b0 S
1(
06
11
#2418
01
#2431
b11 \
11
#2444
01
#2457
b10 .
b10 R
b100 \
11
#2470
01
#2483
b101 \
b1001010010011110101011000100000010110110011000001111000001110000011000101011101 _
11
#2496
01
#2509
b0 \
11
#2522
01
#2535
b1 .
b1 R
0(
11
#2548
01
#2561
11
#2574
01
#2587
11
#2600
01
#2613
11
#2626
01
#2639
11
#2652
01
#2665
11
#2678
01
#2691
11
#2704
01
#2717
11
#2730
01
#2743
11
#2756
01
#2769
11
#2782
01
#2795
11
#2808
01
#2821
11
#2834
01
#2847
11
#2860
01
#2873
11
#2886
01
#2899
11
#2912
01
#2925
11
#2938
01
#2951
11
#2964
01
#2977
11
#2990
01
#3003
11
#3016
01
#3029
11
#3042
01
#3055
11
#3068
01
#3081
11
#3094
01
#3107
11
#3120
01
#3133
11
#3146
01
#3159
11
#3172
01
#3185
11
#3198
01
#3211
11
#3224
01
#3237
11
#3250
01
#3263
11
#3276
01
#3289
11
#3302
01
#3315
11
#3328
01
#3341
11
#3354
01
#3367
11
#3380
01
#3393
11
#3406
01
#3419
11
#3432
01
#3445
11
#3458
01
#3471
11
#3483
